% Table of Best Results
function bestclassresults(Stats, Options)


switch lower(Options.exp)
    
    case 'manifold'
        %{
        Data structure 'stats'
        fields: 'le', 'lpp', 'se', 'sep'
        fields: perClass, OA, AA, APr, ASe, ASp, k, v, dims, nTesting, nTraining,
        classNames, time
        %}
        
        % get variables
        perClass = Stats.le.R(:,11);        % per class accuracy
        classNames = Stats.classNames ; % class names
        nTraining = Stats.le.nTraining;
        nTesting = Stats.le.nTesting;


        % Display Per class results
        fprintf('Class # \t\t Class Name \t\t\t train \t test \t LE \t SE \t LPP \t SEP\n');

        for istat = 1:numel(perClass)

            fprintf([ sprintf('Class %02.0f\t', istat) ...        % class number
                sprintf('%s\t\t\t\t', classNames{istat}) ...                  % class name
                sprintf('%d\t', nTraining(istat)) ...                    % number of training
                sprintf('%d\t\t\t\t', nTesting(istat)) ...                      % number of testing
                sprintf('%.2f\t', Stats.le.R(istat, 11)) ...
                sprintf('%.2f\t', Stats.se.R(istat, 11)) ...
                sprintf('%.2f\t', Stats.lpp.R(istat, 11)) ...
                sprintf('%.2f\n', Stats.sep.R(istat, 11)) ]);

        end

        fprintf([sprintf('\tOA :\t\t\t%.2f\t%02.2f\t%.2f\t%.2f\t\n', ...
        Stats.le.OA, Stats.se.OA, Stats.lpp.OA, Stats.sep.OA) ...
        fprintf('\tAA :\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.le.AA, Stats.se.AA, Stats.lpp.AA, Stats.sep.AA) ...
        fprintf('\tAP :\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.le.APr, Stats.se.APr, Stats.lpp.APr, Stats.sep.APr) ...
        fprintf('\tASp :\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.le.ASp, Stats.se.ASp, Stats.lpp.ASp, Stats.sep.ASp) ...
        fprintf('\t kappa :\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.le.k, Stats.se.k, Stats.lpp.k, Stats.sep.k) ...
        fprintf('\t kappa variance :\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.le.v, Stats.se.v, Stats.lpp.v, Stats.sep.v) ...
        fprintf('\t Dimentions :\t\t\t%d\t%d\t%d\t%d\t\n', ...
        Stats.le.nDims, Stats.se.nDims, Stats.lpp.nDims, Stats.sep.nDims) ...
        fprintf('\tTime:\t\t\t%d\t%d\t%d\t%d\t\n', ...
        Stats.le.time, Stats.se.time, Stats.lpp.time, Stats.sep.time)]);
    
    case 'alignment'
        %{
        Data structure 'stats'
        fields: 'wang', 'ssma', 'sema'
        fields: perClass, OA, AA, APr, ASe, ASp, k, v, dims, nTesting, nTraining,
        classNames, time
        %}
        
        % get variables
        perClass = Stats.wang{1,1}.R(:,11);        % per class accuracy
        classNames = Stats.classNames ; % class names
        nTraining{1} = Stats.wang{1,1}.nTraining;
        nTraining{2} = Stats.wang{1,2}.nTraining;
        nTesting{1} = Stats.wang{1,1}.nTesting;
        nTesting{2} = Stats.wang{1,2}.nTesting;


        % Display Per class results
        fprintf('Class #\t Class Name\t train \t\t test \t\t Wang \t\t SSMA \t\t SEMA\n');

        for istat = 1:numel(perClass)

        fprintf([ sprintf('Class %02.0f', istat) ...        % class number
            fprintf('%s\t', classNames{istat}) ...                  % class name
            fprintf('%d\t', nTraining{1}(istat)) ...                    % number of training (d1)
            fprintf('%d\t', nTraining{2}(istat)) ...                    % number of training (d2)
            fprintf('%d\t', nTesting{1}(istat)) ...                      % number of testing (d1)
            fprintf('%d\t', nTesting{2}(istat)) ...                      % number of testing (d2)
            fprintf('%.2f\t', Stats.wang{1}.R(istat, 11)) ...
            fprintf('%.2f\t', Stats.wang{2}.R(istat, 11)) ...
            fprintf('%.2f\t', Stats.ssma{1}.R(istat, 11)) ...
            fprintf('%.2f\t', Stats.ssma{2}.R(istat, 11)) ...
            fprintf('%.2f\t', Stats.sema{1}.R(istat, 11)) ...
            fprintf('%.2f\t', Stats.sema{2}.R(istat, 11))  ]);

        end

        fprintf([sprintf('\tOA :\t\t\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.wang{1}.OA, Stats.wang{2}.OA, ...
        Stats.ssma{1}.OA, Stats.ssma{2}.OA, ...
        Stats.sema{1}.OA, Stats.sema{2}.OA) ...
        fprintf('\tAA :\t\t\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.wang{1}.AA, Stats.wang{2}.AA, ...
        Stats.ssma{1}.AA, Stats.ssma{2}.AA, ...
        Stats.sema{1}.AA, Stats.sema{2}.AA) ...
        fprintf('\tAP :\t\t\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.wang{1}.APr, Stats.wang{2}.APr, ...
        Stats.ssma{1}.APr, Stats.ssma{2}.APr, ...
        Stats.sema{1}.APr, Stats.sema{2}.APr) ...
        fprintf('\tASp :\t\t\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.wang{1}.ASp, Stats.wang{2}.ASp, ...
        Stats.ssma{1}.ASp, Stats.ssma{2}.ASp, ...
        Stats.sema{1}.ASp, Stats.sema{2}.ASp) ...
        fprintf('\t kappa :\t\t\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.wang{1}.k, Stats.wang{2}.k, ...
        Stats.ssma{1}.k, Stats.ssma{2}.k, ...
        Stats.sema{1}.k, Stats.sema{2}.k) ...
        fprintf('\t kappa variance :\t\t\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.wang{1}.kv, Stats.wang{2}.kv, ...
        Stats.ssma{1}.kv, Stats.ssma{2}.kv, ...
        Stats.sema{1}.kv, Stats.sema{2}.kv) ...
        fprintf('\t Dimentions :\t\t\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.wang{1}.dim, Stats.wang{2}.dim, ...
        Stats.ssma{1}.dim, Stats.ssma{2}.dim, ...
        Stats.sema{1}.dim, Stats.sema{2}.dim) ...
        fprintf('\tTime:\t\t\t\t\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t\n', ...
        Stats.wang{1,1}.time, Stats.wang{1,1}.time, ...
        Stats.ssma{1,1}.time, Stats.ssma{1,1}.time, ...
        Stats.sema{1,1}.time, Stats.sema{1,1}.time)]);        
    
    otherwise
        error('unrecognized experiment field.');

end
