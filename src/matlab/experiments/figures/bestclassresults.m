% Table of Best Results
function bestclassresults(Stats, Options)


switch lower(Options.exp)
    
    case 'manifold'
        %{
        Data structure 'stats'
        fields: 'le', 'lpp', 'se', 'sep'
        fields: perClass, OA, AA, APr, ASe, ASp, k, kv, dims, nTesting, nTraining,
        classNames, time
        %}
        
        % get variables
        perClassAcc = Stats.R(:,11);        % per class accuracy
        OA = Stats.OA;                           % overall accuracy
        AA = Stats.AA;                            % average accuracy
        APr = Stats.APr;                          % avverage precision
        ASpe = Stats.ASpe;                     % average specificity
        K = Stats.k;                                  % kappa coefficient
        KV = Stats.kv;                              % kappa variance
        nDims = Stats.dims;                     % number of dimensions
        time = Stats.time;                        % time taken for run through
        classNames = Stats.classNames ; % class names
        nTraining = Stats.nTraining;
        nTesting = Stats.nTesting;


        % Display Per class results
        fprintf('Class #\t Class Name\t train \t test \t LE \t SE \t LPP \t SEP');

        for istat = 1:numel(perClass(:,11))

        fprintf([ sprintf('Class %02.0f', istat) ...        % class number
            sprintf('%s\t', classNames(istat)) ...                  % class name
            sprintf('%d\t', nTraining(istat)) ...                    % number of training
            sprintf('%d\t', ntesting(istat)) ...                      % number of testing
            sprintf('%d\t', Stats.le.R(istat, 11)) ...
            sprintf('%d\t', Stats.se.R(istat, 11)) ...
            sprintf('%d\t', Stats.lpp.R(istat, 11)) ...
            sprintf('%d\n', Stats.sep.R(istat, 11)) ]);

        end

        fprintf([sprintf('\tOA :\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.le.OA, Stats.se.OA, Stats.lpp.OA, Stats.sep.OA) ...
        sprintf('\tAA :\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.le.AA, Stats.se.AA, Stats.lpp.AA, Stats.sep.AA) ...
        sprintf('\tAP :\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.le.AP, Stats.se.AP, Stats.lpp.AP, Stats.sep.AP) ...
        sprintf('\tASp :\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.le.ASp, Stats.se.ASp, Stats.lpp.ASp, Stats.sep.ASp) ...
        sprintf('\t\\kappa :\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.le.k, Stats.se.k, Stats.lpp.k, Stats.sep.k) ...
        sprintf('\t\\kappa variance :\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.le.kv, Stats.se.kv, Stats.lpp.kv, Stats.sep.kv) ...
        sprintf('\t Dimentions :\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.le.dims, Stats.se.dims, Stats.lpp.dims, Stats.sep.dims) ...
        sprintf('\tTime:\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.le.time, Stats.se.time, Stats.lpp.time, Stats.sep.time)]);
    
    case 'alignment'
        %{
        Data structure 'stats'
        fields: 'wang', 'ssma', 'sema'
        fields: perClass, OA, AA, APr, ASe, ASp, k, kv, dims, nTesting, nTraining,
        classNames, time
        %}
        
        % get variables
        perClassAcc = Stats.R(:,11);        % per class accuracy
        OA = Stats.OA;                           % overall accuracy
        AA = Stats.AA;                            % average accuracy
        APr = Stats.APr;                          % avverage precision
        ASpe = Stats.ASpe;                     % average specificity
        K = Stats.k;                                  % kappa coefficient
        KV = Stats.kv;                              % kappa variance
        nDims = Stats.dims;                     % number of dimensions
        time = Stats.time;                        % time taken for run through
        classNames = Stats.classNames ; % class names
        nTraining = Stats.nTraining;
        nTesting = Stats.nTesting;


        % Display Per class results
        fprintf('Class #\t Class Name\t train \t\t test \t\t Wang \t\t SSMA \t\t SEMA\n');

        for istat = 1:numel(perClass(:,11))

        fprintf([ sprintf('Class %02.0f', istat) ...        % class number
            sprintf('%s\t', classNames(istat)) ...                  % class name
            sprintf('%d\t', nTraining{1}(istat)) ...                    % number of training (d1)
            sprintf('%d\t', nTraining{2}(istat)) ...                    % number of training (d2)
            sprintf('%d\t', nTesting{1}(istat)) ...                      % number of testing (d1)
            sprintf('%d\t', nTesting{2}(istat)) ...                      % number of testing (d2)
            sprintf('%d\t', Stats.wang{1}.R(istat, 11)) ...
            sprintf('%d\t', Stats.wang{2}.R(istat, 11)) ...
            sprintf('%d\t', Stats.ssma{1}.R(istat, 11)) ...
            sprintf('%d\t', Stats.ssma{2}.R(istat, 11)) ...
            sprintf('%d\t', Stats.sema{1}.R(istat, 11)) ...
            sprintf('%d\t', Stats.sema{2}.R(istat, 11))  ]);

        end

        fprintf([sprintf('\tOA :\t\t\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.wang{1}.OA, Stats.wang{2}.OA, ...
        Stats.ssma{1}.OA, Stats.ssma{2}.OA, ...
        Stats.sema{1}.OA, Stats.sema{2}.OA) ...
        sprintf('\tAA :\t\t\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.wang{1}.AA, Stats.wang{2}.AA, ...
        Stats.ssma{1}.AA, Stats.ssma{2}.AA, ...
        Stats.sema{1}.AA, Stats.sema{2}.AA) ...
        sprintf('\tAP :\t\t\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.wang{1}.AP, Stats.wang{2}.AP, ...
        Stats.ssma{1}.AP, Stats.ssma{2}.AP, ...
        Stats.sema{1}.AP, Stats.sema{2}.AP) ...
        sprintf('\tASp :\t\t\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.wang{1}.ASp, Stats.wang{2}.ASp, ...
        Stats.ssma{1}.ASp, Stats.ssma{2}.ASp, ...
        Stats.sema{1}.ASp, Stats.sema{2}.ASp) ...
        sprintf('\t\\kappa :\t\t\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.wang{1}.k, Stats.wang{2}.k, ...
        Stats.ssma{1}.k, Stats.ssma{2}.k, ...
        Stats.sema{1}.k, Stats.sema{2}.k) ...
        sprintf('\t\\kappa variance :\t\t\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.wang{1}.kv, Stats.wang{2}.kv, ...
        Stats.ssma{1}.kv, Stats.ssma{2}.kv, ...
        Stats.sema{1}.kv, Stats.sema{2}.kv) ...
        sprintf('\t Dimentions :\t\t\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.wang{1}.dims, Stats.wang{2}.dims, ...
        Stats.ssma{1}.dims, Stats.ssma{2}.dims, ...
        Stats.sema{1}.dims, Stats.sema{2}.dims) ...
        sprintf('\tTime:\t\t\t\t\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t%02.0f\t', ...
        Stats.wang{1}.time, Stats.wang{2}.time, ...
        Stats.ssma{1}.time, Stats.ssma{2}.time, ...
        Stats.sema{1}.time, Stats.sema{2}.time)]);        
    
    otherwise
        error('unrecognized experiment field.');

end
